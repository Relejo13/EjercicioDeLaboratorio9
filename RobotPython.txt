class Robot:
    def __init__(self, grid):
        self.grid = grid
        self.rows = len(grid)
        self.cols = len(grid[0]) if self.rows > 0 else 0
        self.path = []
        self.visited = set()

    def is_valid_move(self, x, y):
        return 0 <= x < self.rows and 0 <= y < self.cols and self.grid[x][y] == 0

    def find_path(self):
        if not self.grid or self.grid[0][0] == 1 or self.grid[self.rows-1][self.cols-1] == 1:
            return None
        
        if self.dfs(0, 0):
            return self.path
        else:
            return None

    def dfs(self, x, y):
        if (x, y) == (self.rows - 1, self.cols - 1):
            self.path.append((x, y))
            return True
        
        if not self.is_valid_move(x, y) or (x, y) in self.visited:
            return False

        self.visited.add((x, y))
        self.path.append((x, y))

        # Move right
        if self.dfs(x, y + 1):
            return True
        
        # Move down
        if self.dfs(x + 1, y):
            return True

        # Backtrack
        self.path.pop()
        return False


# Ejemplo de uso:
grid = [
    [0, 0, 1, 0],
    [0, 0, 0, 0],
    [1, 1, 0, 1],
    [0, 0, 0, 0]
]

robot = Robot(grid)
path = robot.find_path()
print("Path found:" if path else "No path found")
if path:
    print(path)